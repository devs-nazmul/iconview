// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]

}

// prisma/schema.prisma

datasource db {

  // provider = "sqlite"
  // url      = "file:./dev.db"

  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  sessions          Session[]
  subscriber        Subscriber?
  stripe_cid        String?
  custom_image      CustomImage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscriber {
  id            String           @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  price         Float
  created       DateTime @default(now())
  expired       DateTime
}


model Icon {
  id       String   @id @default(cuid()) @unique
  name     String
  label    String
  tags     String[]
  vendor   String
  styles   Style[]
}


model Style {
  id      String   @id @default(cuid()) @unique
  type    String
  isFree  Boolean
  usage   String
  viewBox String
  path    String[]
  svg     String
  Icon    Icon    @relation(fields: [iconId], references: [id],  onDelete: Cascade)
  iconId  String
}

model CustomImage {
  id      String   @id @default(cuid()) @unique
  image   Bytes
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Usage {
//   id          String  @id @default(cuid())
//   name        String?
//   style       Style  @relation(fields: [styleId], references: [name],  onDelete: Cascade)
//   styleId     String
// }


// model Tag {
//   id     String @id @unique @default(cuid())
//   tag    String?
//   icon   Icon   @relation(fields: [iconId], references: [name], onDelete: Cascade)
//   iconId String
// }



// model Path {
//   id       String  @id @default(cuid())
//   d        String?
//   style    Style  @relation(fields: [styleId], references: [name],  onDelete: Cascade)
//   styleId  String
// }
//
